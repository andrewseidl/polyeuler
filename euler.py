#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Project Euler in Python (2.5)
# John Evans <john@jpevans.com>


import sys
import math


def euler1():
    """Euler #1
    Answer: 233168

    If we list all the natural numbers below 10 that are multiples of 3 or 5,
    we get 3, 5, 6 and 9. The sum of these multiples is 23.

    Find the sum of all the multiples of 3 or 5 below 1000.

    """

    return sum(i for i in range(1, 1000) if i % 3 == 0 or i % 5 == 0)


def euler2():
    """Euler #2
    Answer: 4613732

    Each new term in the Fibonacci sequence is generated by adding the previous
    two terms. By starting with 1 and 2, the first 10 terms will be:

    1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

    Find the sum of all the even-valued terms in the sequence which do not
    exceed four million.

    """

    n, a, b = 2, 1, 2
    while True:
        c = a + b
        if c > 4000000:
            break
        if c % 2 == 0:
            n = n + c
        a, b = b, c
    return n


def slow_is_prime(n):
    for x in range(2, int(math.ceil(math.sqrt(n)))):
        if n % x == 0:
            return False
    return True


def euler3():
    """Euler #3:
    Answer: 6857

    The prime factors of 13195 are 5, 7, 13 and 29.
    What is the largest prime factor of the number 600851475143 ?

    """

    X = 600851475143
    n = math.ceil(math.sqrt(X))
    while True:
        if X % n == 0 and slow_is_prime(n):
            return n
        n -= 1


def euler4():
    """Problem #4
    Answer: 906609

    A palindromic number reads the same both ways. The largest
    palindrome made from the product of two 2-digit numbers is 9009 =
    91 99.

    Find the largest palindrome made from the product of two 3-digit
    numbers.

    """

    r = 0
    for a in range(100, 1000):
        for b in range(100, 1000):
            c = a * b
            s = "%d" % c
            if s == s[::-1]:
                r = max(c, r)
    return r


def divisible_by_all(n, ds):
    for d in ds:
        if n % d != 0:
            return False
    return True


def euler5():
    """Problem #5
    Answer: 232792560

    2520 is the smallest number that can be divided by each of the
    numbers from 1 to 10 without any remainder.

    What is the smallest number that is evenly divisible by all of the
    numbers from 1 to 20?

    """

    r = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11]

    i = 2520
    while True:
        if divisible_by_all(i, r):
            return i
        i += 1


def euler6():
    """Problem #6
    Answer: 25164150

    The sum of the squares of the first ten natural numbers is,
      1² + 2² + ... + 10² = 385
    The square of the sum of the first ten natural numbers is,
      (1 + 2 + ... + 10)² = 55² = 3025
    Hence the difference between the sum of the squares of the first
    ten natural numbers and the square of the sum is 3025 - 385 = 2640.

    Find the difference between the sum of the squares of the first one
    hundred natural numbers and the square of the sum.

    """

    r = range(1, 101)
    s = sum(r)
    return (s * s) - sum([(i * i) for i in r])


def euler7():
    """Problem #7
    Answer: 104743

    By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we
    can see that the 6th prime is 13.

    What is the 10001st prime number?

    """

    n = 2
    primes = [2]
    result = 0
    while True:
        for prime in primes:
            if n % prime == 0:
                break
        else:
            if len(primes) >= 10000:
                result = n
                break
            primes.append(n)
        n += 1
    return result


EULERS = [
    euler1,
    euler2,
    euler3,
    euler4,
    euler5,
    euler6,
]


def main():
    if len(sys.argv) > 1:
        for n in sys.argv[1:]:
            n = int(n)
            print "%d: %d" % (n, eval("euler%d()" % n))
    else:
        for index, euler in enumerate(EULERS):
            print "%d: %d" % (index + 1, euler())


if __name__ == "__main__":
    main()
