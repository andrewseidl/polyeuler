object ScalaEuler {
    // Really? not built in?
    def inject(arr: Collection[Int], initial: Int, operation: (Int, Int) => Int) : Int = {
        var carryOver = initial
        arr.foreach(element => carryOver = operation(carryOver, element) )
        carryOver
    }

    // Really? not built in?
    def sum(list:Collection[Int]):Int = inject(list, 0, (carryOver, elem) => carryOver + elem)

    /**
     * Euler #1
     * Answer: 233168
     *
     * If we list all the natural numbers below 10 that are multiples of 3 or 5,
     * we get 3, 5, 6 and 9. The sum of these multiples is 23.
     *
     * Find the sum of all the multiples of 3 or 5 below 1000.
     */
    def euler1():Int = sum((3 until 1000).map(n => if (n % 3 == 0 || n % 5 == 0) n else 0))

    /**
     * Euler #2
     * Answer: 4613732
     *
     * Each new term in the Fibonacci sequence is generated by adding the previous
     * two terms. By starting with 1 and 2, the first 10 terms will be:
     *
     * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
     *
     * Find the sum of all the even-valued terms in the sequence which do not
     * exceed four million.
     */
    def next_fib(a:Int, b:Int):Int = a + b

    def e2search(a:Int, b:Int, sum:Int):Int = if (b > 4000000) sum else e2search(b, next_fib(a, b), if (b % 2 == 0) sum + b else sum)

    def euler2():Int = e2search(1, 2, 0)

    /** "Main" stuff **/

    val eulers = List(euler1, euler2)

    def show_results(prob_number:Int, result:Int):Unit = println("#" + prob_number + ": " + result)

    def main(args: Array[String]) = {
        if (args.length > 0) {
            for (arg <- args) {
                val problem_number = Integer.parseInt(arg)
                val euler = eulers(problem_number-1)
                show_results(problem_number, euler)
            }
        } else {
            for ((euler, index) <- eulers.zipWithIndex) {
                val problem_number = index + 1
                show_results(problem_number, euler)
            }
        }
    }
}
