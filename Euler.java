import java.lang.reflect.Method;
import java.math.BigInteger;

public class Euler
{
    public static final int MAX_IMPLEMENTED_EULER = 2;

    /**
     * Euler #1
     * Answer: 233168
     * 
     * If we list all the natural numbers below 10 that are multiples of 3 or 5,
     * we get 3, 5, 6 and 9. The sum of these multiples is 23.
     * 
     * Find the sum of all the multiples of 3 or 5 below 1000.
     */
    public static int euler1() {
        int sum = 0;
        for (int i=3; i<1000; i++) {
            if ((i % 3 == 0) || (i % 5 == 0)) {
                sum += i;
            }
        }
        return sum;
    }

    /**
     * Euler #2
     * Answer: 4613732
     *
     * Each new term in the Fibonacci sequence is generated by adding the previous
     * two terms. By starting with 1 and 2, the first 10 terms will be:
     *
     * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
     *
     * Find the sum of all the even-valued terms in the sequence which do not
     * exceed four million.
     */
    public static int euler2() {
        int n = 2, a = 1, b = 2;
        while (true) {
            int c = a + b;
            if (4000000 <= c) {
                break;
            }
            if (0 == c % 2) {
                n += c;
            }
            a = b;
            b = c;
        }
        return n;
    }

    /**
     * Euler #3:
     * Answer: 6857
     *
     * The prime factors of 13195 are 5, 7, 13 and 29.
     *
     * What is the largest prime factor of the number 600851475143 ?
     */
    public static final boolean is_prime(int n) 
    {
        for (var i=2; i<Math.ceil(Math.sqrt(n)); i++) {
            if (n % i == 0) {
                return false;
            }
        }
        return true;
    }

    // public static int euler3() {
    //     final BigInteger target = BigInteger("600851475143");
    //     // Sigh.  No sqrt for BigInteger.
    //     for (int i=Math.ceil(Math.sqrt(target)); i>=2; i++) {
    //         if (is_prime(i)) {
    //             return i;
    //         }
    //     }
    //     return -1;
    // }

    public static void show(int n)
        throws Exception {
        Method method = Euler.class.getMethod("euler" + n);
        System.out.println("#" + n + ": " + method.invoke(null));
    }

    public static void main(String[] args) 
        throws Exception
    {
        if (args.length > 0) {
            for (int i=0; i<args.length; i++) {
                show(Integer.parseInt(args[i]));
            }
        } else {
            for (int i=0; i<MAX_IMPLEMENTED_EULER; i++) {
                show(i + 1);
            }
        }
    }
}